#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Oct 28 13:00:59 2020

@author: glenkiely99
"""

### This code propagates electrn beams through a sample, using a Monte Carlo algorithm to 
### generate scattering angles and step distances. 
import numpy as np
import random
import math
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from numba import jit
#######################
avo = 6.022e23 #avogadros number
E0 = 100 #starting energy of electron in keV
E = E0
Z = 6 #atomic number of sample
A = 12.011 #g/mol
rho = 2.1 #density of target g/cm3
thickness = 200e-4 + 1e-2  #thickness of sample in centimetres 
e_min = 0.5 #cutoff energy in keV
beams = 100 #number of electron beams to propagate
d = 2e-9 #electron beam diameter - need to integrate a function of lambda / 2 sin theta
#######################
number_backscattered = 0
number_stopped = 0
number_transmitted = 0
#######################
fig = plt.figure()
ax = plt.axes(projection="3d")
#######################

#random number generating function
def RND(a = 0, b = 1):
    RND = random.uniform(a,b)
    return RND

#stopping power is used to calculate the energy lost at each step of propagation 
def stop_power(E, Z = 6):
    J = (9.76*Z + (58.5/Z**0.19)) * (1e-3) #mean ionisation potential keV
    stopping_power = -78500 * (Z/(A*E)) * np.log((1.166*(E + (0.85*J)))/J)
    return stopping_power

#this is used to calculate the step length 
def elastic_mfp_alpha(E, Z = 6):
    alpha = ((0.0034*(Z**0.67))/E)
    elastic_cross_sec = (5.21e-21)*((Z**2)/(E**2))*((4 * math.pi)/(alpha*(1+alpha)))*(((E+511)/(E + 1024))**2)
    elastic_mean_free_path = (A) / (avo * rho * elastic_cross_sec) 
    return elastic_mean_free_path, alpha #in cm 

#function of the mean free path above
def step_length(elastic_mean_free_path):
    random = RND()
    step = (- elastic_mean_free_path) * np.log( random ) 
    return step #in cm

#find initial positions and directional cosines 
def initialise_postions(E = E0, d = 2e-9): 
    (elastic_mean_free_path, alpha) = elastic_mfp_alpha(E)
    z0 = step_length(elastic_mean_free_path) + 1e-2
    nat_log = math.log(RND())
    constant = d*math.sqrt(-nat_log) / (2*1.65)
    x0 = constant * math.cos(2*math.pi * RND())
    y0 = constant * math.cos(2*math.pi * RND())
    vector_length = math.sqrt(x0**2 + y0**2 + z0**2)
    cx = x0/vector_length
    cy = y0/vector_length
    cz = z0/vector_length
    coordinates = (x0,y0,z0)
    cosines = (cx,cy,cz)
    return coordinates, cosines

#determine the angles for scattering at each step
def scattering_angles(alpha):
    randcos = RND()
    Cos_theta = 1 - ((2*alpha*randcos)/(1+alpha-randcos))
    Sin_theta = math.sqrt(1-Cos_theta**2)
    Azi_scat_angle = 2 * math.pi * RND()
    return Cos_theta, Sin_theta, Azi_scat_angle

#perform a step in coordinates and change cosines
def coord_step(coords, cosines, step, E, alpha):
    (x,y,z) = (coords[0], coords[1], coords[2])
    (A,B,C) =(cosines[0],cosines[1],cosines[2])
    costheta = C
    sintheta = math.sqrt(1 - C**2)
    if sintheta == 0:
        sintheta = 0.00001
    sinphi = A / sintheta 
    cosphi = B / sintheta 
    #######################
    Cos_theta, Sin_theta, Azi_scat_angle = scattering_angles(alpha)
    cosscat = math.cos(Azi_scat_angle)
    sinscat = math.sin(Azi_scat_angle)
    Alpha = Sin_theta * sinscat
    Beta = Sin_theta * cosscat
    Gamma = Cos_theta
    #######################
    ca = Alpha*cosphi + sinphi*(Beta*costheta + Gamma*sintheta)
    cb = -Alpha*sinphi + cosphi*(Beta*costheta + Gamma*sintheta)
    cc = -Beta * sintheta + Gamma*costheta
    #######################
    xn = x + (step*ca)
    yn = y + (step*cb)
    zn = z + (step*cc)
    #######################
    coords = (xn, yn, zn)
    coordinate_history.append(coords)
    cosines = (ca, cb, cc)
    return coords, cosines

#loop for propagation
for i in range(beams): 
    print("_____________________________________________________NEW_BEAM")
    coordinate_history = []
    (coordinates,cosines) = initialise_postions() 
    condition = True
    no_of_steps = 1
    E = E0
    #######################
    while condition: 
        z = coordinates[2]
        if z < 1e-2:
            condition = False
            number_backscattered += 1
            break
        if E <= e_min:
            condition = False
            number_stopped += 1
            break
        if z > thickness:
            condition = False
            number_transmitted += 1
            break
        (elastic_mean_free_path, alpha) = elastic_mfp_alpha(E)
        step = step_length(elastic_mean_free_path)
        (coordinates, cosines) = coord_step(coordinates, cosines, step, E, alpha) 
        #######################
        stopping_power = stop_power(E)
        E_lost = (step * rho * stopping_power)
        E = E + E_lost
        no_of_steps += 1
    print("no of steps = " + str(no_of_steps))
    x_coords = [i[0] for i in coordinate_history]
    y_coords = [i[1] for i in coordinate_history]
    z_coords = [-i[2] + 1e-2 for i in coordinate_history]
    colour = (round(RND(),2),round(RND(),2),round(RND(),2))
    ax.plot3D(x_coords, y_coords, z_coords, color = colour, linewidth = 0.9)
    #######################

print("transmitted = " + str(number_transmitted))
print("stopped = " + str(number_stopped))
print("backscattered = " + str(number_backscattered))
plt.show()



